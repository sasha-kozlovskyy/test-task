{"version":3,"sources":["components/Button.tsx","validation/validationsSchema.ts","components/Form.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","press","onClick","setPress","type","validationSchema","Yup","shape","fullname","required","username","min","max","email","password","confirmPassword","oneOf","acceptTerms","Form","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","onSubmit","data","setSuccess","console","log","JSON","stringify","message","htmlFor","App","useState","success","closeSuccessMessage","setCloseSuccessMessage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c57d735d.chunk.js","sourcesContent":["type Props = {\n  press: boolean;\n  setPress: any;\n}\n\nexport const Button = (props: Props) => {\n\n  return (\n    <div className=\"button-wrapper\">\n      {!props.press ? (\n        <button\n          onClick={() => props.setPress(true)}\n          className=\"btn btn-primary size\"\n          type=\"button\"\n        >\n          Please register now\n        </button>\n      ) : (\n        <button\n          onClick={() =>  props.setPress(false)}\n          className=\"btn btn-warning size\"\n          type=\"button\"\n        >\n          Register later\n        </button>\n      )}\n    </div>\n  )\n}\n","import * as Yup from 'yup';\n\nexport const validationSchema = Yup.object().shape({\n  fullname: Yup.string().required('Fullname is required'),\n  username: Yup.string()\n    .required('Username is required')\n    .min(6, 'Username must be at least 6 characters')\n    .max(20, 'Username must not exceed 20 characters'),\n  email: Yup.string()\n    .required('Email is required')\n    .email('Email is invalid'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(6, 'Password must be at least 6 characters')\n    .max(40, 'Password must not exceed 40 characters'),\n  confirmPassword: Yup.string()\n    .required('Confirm Password is required')\n    .oneOf([Yup.ref('password'), null], 'Confirm Password does not match'),\n  acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\n});\n","import { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { UserSubmitForm } from '../types/formType';\nimport { validationSchema } from '../validation/validationsSchema';\n\ntype Props = {\n  press: boolean;\n  setSuccess: any;\n}\n\nexport const Form = (props: Props) => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors }\n  } = useForm<UserSubmitForm>({\n    resolver: yupResolver(validationSchema)\n    });\n\n  const onSubmit = (data: UserSubmitForm) => {\n    props.setSuccess(true);\n    console.log(JSON.stringify(data, null, 2));\n  };\n\n  return (\n    <form className={`register-form ${props.press ? 'activ' : ''}`} onSubmit={handleSubmit(onSubmit)}>\n    <div className=\"form-group\">\n      <label>Full Name</label>\n      <input\n        type=\"text\"\n        {...register('fullname')}\n        className={`form-control ${errors.fullname ? 'is-invalid' : ''}`}\n      />\n      <div className=\"invalid-feedback\">{errors.fullname?.message}</div>\n    </div>\n\n    <div className=\"form-group\">\n      <label>Username</label>\n      <input\n        type=\"text\"\n        {...register('username')}\n        className={`form-control ${errors.username ? 'is-invalid' : ''}`}\n      />\n      <div className=\"invalid-feedback\">{errors.username?.message}</div>\n    </div>\n\n    <div className=\"form-group\">\n      <label>Email</label>\n      <input\n        type=\"text\"\n        {...register('email')}\n        className={`form-control ${errors.email ? 'is-invalid' : ''}`}\n      />\n      <div className=\"invalid-feedback\">{errors.email?.message}</div>\n    </div>\n\n    <div className=\"form-group\">\n      <label>Password</label>\n      <input\n        type=\"password\"\n        {...register('password')}\n        className={`form-control ${errors.password ? 'is-invalid' : ''}`}\n      />\n      <div className=\"invalid-feedback\">{errors.password?.message}</div>\n    </div>\n    <div className=\"form-group\">\n      <label>Confirm Password</label>\n      <input\n        type=\"password\"\n        {...register('confirmPassword')}\n        className={`form-control ${\n          errors.confirmPassword ? 'is-invalid' : ''\n        }`}\n      />\n      <div className=\"invalid-feedback\">\n        {errors.confirmPassword?.message}\n      </div>\n    </div>\n\n    <div className=\"form-group form-check\">\n      <input\n        type=\"checkbox\"\n        {...register('acceptTerms')}\n        className={`form-check-input ${\n          errors.acceptTerms ? 'is-invalid' : ''\n        }`}\n      />\n      <label htmlFor=\"acceptTerms\" className=\"form-check-label\">\n        I have read and agree to the Terms\n      </label>\n      <div className=\"invalid-feedback\">{errors.acceptTerms?.message}</div>\n    </div>\n\n    <div className=\"form-group\">\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Register\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => reset()}\n        className=\"btn btn-warning float-right\"\n      >\n        Reset\n      </button>\n    </div>\n  </form>\n  );\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport { Button } from './components/Button';\nimport { Form } from './components/Form';\n\n\nconst App: React.FC = () => {\n  const [ press, setPress ] = useState<boolean>(false);\n  const [ success, setSuccess ] = useState<boolean>(false);\n  const [ closeSuccessMessage, setCloseSuccessMessage ] = useState<boolean>(false);\n  \n  return (\n    <div className=\"form-wrapper\">\n      {!success ? (\n        <>\n        <Button press={press} setPress={setPress} />\n        <Form press={press} setSuccess={setSuccess} />\n        </>\n      ) : (\n        <div className={`success ${closeSuccessMessage ? 'close' : ''}`}>\n          <button className=\"close-successMessage\" onClick={() => setCloseSuccessMessage(true)}>x</button>\n          <span>Congratulations, you are successfully registered</span>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}